"""
Clinical Rounds Backend API

This FastAPI application provides endpoints for managing patient data and generating
clinical summaries for Mt Sinai's clinical rounds system. It integrates with:
- Azure Cosmos DB for patient data storage
- OpenAI/Azure OpenAI for AI-powered summarization
- Application Insights for telemetry and monitoring
"""

import os
from pathlib import Path
# FastAPI framework and dependencies for building REST API
from fastapi import FastAPI, BackgroundTasks, Request, Depends
# Environment variable management
from dotenv import load_dotenv
# Prompty framework for AI prompt management and tracing
from prompty.tracer import trace
from prompty.core import PromptyStream, AsyncPromptyStream
# FastAPI response types and middleware
from fastapi.responses import StreamingResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
# OpenTelemetry instrumentation for monitoring
from opentelemetry.instrumentation.fastapi import FastAPIInstrumentor
from fastapi import FastAPI, Body
# Pydantic for data validation
from pydantic import BaseModel
# URL encoding for database connection strings
from urllib.parse import quote_plus
# Custom modules for database operations and AI summarization
import cosmosdb_helper
import summarizer
from auth_middleware import get_current_user, get_current_user_from_request, require_auth, get_user_from_request
from typing import Dict, Any

# Task model for background processing
class Task(BaseModel):
    id: str

# Custom telemetry setup module
from telemetry import setup_telemetry

# Get the base directory for the application
base = Path(__file__).resolve().parent

# Load environment variables from .env file
load_dotenv()

# Initialize FastAPI application
app = FastAPI()

# Azure Cosmos DB configuration
# Extract and clean database connection parameters from environment variables
database = os.getenv("COSMOSDB_DATABASE").strip('" ')
container = os.getenv("COSMOSDB_COLLECTION").strip('" ')
username = quote_plus(os.getenv("COSMOSDB_USERNAME", "").strip('" '))
password = quote_plus(os.getenv("COSMOSDB_PASSWORD", "").strip('" '))
host = os.getenv("COSMOSDB_HOST", "").strip('" ')
options = os.getenv("COSMOSDB_OPTIONS", "").strip('" ')

# Build MongoDB connection string for Cosmos DB API compatibility
# Note: Using PyMongo 3.x compatible connection string format
connection_string = f"mongodb://{username}:{password}@{host}:10255/?ssl=true&replicaSet=globaldb&retryWrites=false&maxIdleTimeMS=120000"

# Initialize Cosmos DB helper with connection details
cosmosDBHelper = cosmosdb_helper.CosmosDBHelper(connection_string, database, container)

# Initialize AI summarizer with database helper
summarizer = summarizer.Summarizer(cosmosDBHelper)

# Get environment-specific configuration
code_space = os.getenv("CODESPACE_NAME")
app_insights = os.getenv("APPINSIGHTS_CONNECTIONSTRING")
environment = os.getenv("ENVIRONMENT", "production")  # Default to production

# Configure CORS origins based on environment
if code_space: 
    # GitHub Codespaces environment - use dynamic URLs
    origin_8000= f"https://{code_space}-8000.app.github.dev"
    origin_5173 = f"https://{code_space}-5173.app.github.dev"
    ingestion_endpoint = app_insights.split(';')[1].split('=')[1]
    
    origins = [origin_8000, origin_5173, os.getenv("API_SERVICE_ACA_URI"), os.getenv("WEB_SERVICE_ACA_URI"), ingestion_endpoint]
else:
    # Production/local environment - read from origins.txt file
    origins = [
        o.strip()
        for o in Path(Path(__file__).parent / "origins.txt").read_text().splitlines()
    ]
    # Fallback to allow all origins (development only)
    origins = ['*']

# Add CORS middleware to allow cross-origin requests
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Setup telemetry and monitoring
setup_telemetry(app)

# Health check endpoint
@app.get("/")
async def root():
    """Basic health check endpoint"""
    return {"message": "Hello World"}

# Patient data retrieval endpoint
@app.get("/api/patient/{id}")
@trace
async def get_patient(id: str, current_user: Dict[str, Any] = Depends(get_current_user)):
    """
    Retrieve patient data by ID from Cosmos DB
    
    Requires valid Azure AD authentication token.

    Args:
        id (str): Patient identifier (MRN)
        current_user (Dict): Authenticated user information

    Returns:
        JSON: Patient data or error message
    """
    try:
        # Log access for audit trail
        #print(f"Patient data access - User: {current_user.get('email')}, Patient ID: {id}")
        
        patient_data = cosmosDBHelper.get_patient(id)
        # Check if patient was found
        if "error" in patient_data:
            return JSONResponse(status_code=404, content=patient_data)
        return patient_data
    except Exception as e:
        # Return server error for any unexpected exceptions
        return JSONResponse(status_code=500, content={"error": str(e)})

# Patient data storage endpoint
@app.post("/api/patient")
async def save_patient_data(patient_data: dict, current_user: Dict[str, Any] = Depends(get_current_user)):
    """
    Save complete patient data to the database
    
    Requires valid Azure AD authentication token.

    Args:
        patient_data (dict): Complete patient record including MRN
        current_user (Dict): Authenticated user information

    Returns:
        JSON: Success confirmation or error message
    """
    try:
        # Log access for audit trail
        #print(f"Patient data save - User: {current_user.get('email')}")
        
        # Extract patient ID from the data
        patient_id = patient_data.get('mrn')
        if not patient_id:
            return JSONResponse(status_code=400, content={"error": "Missing mrn field in patient data"})

        # Save patient data to Cosmos DB
        cosmosDBHelper.save_patient_data(patient_id, patient_data)
        return {"status": "patient data saved", "mrn": patient_id}
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

# Request model for patient summarization
class PatientRequest(BaseModel):
    patient_id: str

# Background task function for AI summarization
def summarize(patient_id: str):
    """
    Background task to generate AI-powered patient summary

    Args:
        patient_id (str): Patient identifier for summarization
    """
    summarizer.summarize_patient(patient_id)

# Patient summarization endpoint with background processing
@app.post("/api/summarize")
@trace
async def review(request: PatientRequest, background_tasks: BackgroundTasks, current_user: Dict[str, Any] = Depends(get_current_user)):
    """
    Initiate patient data summarization as a background task
    
    Requires valid Azure AD authentication token.

    Args:
        request (PatientRequest): Request containing patient_id
        background_tasks (BackgroundTasks): FastAPI background task manager
        current_user (Dict): Authenticated user information

    Returns:
        JSON: Acceptance confirmation (202 status)
    """
    # Log access for audit trail
    #print(f"Patient summarization request - User: {current_user.get('email')}, Patient ID: {request.patient_id}")
    
    # Add summarization task to background queue
    background_tasks.add_task(summarize, request.patient_id)
    return JSONResponse(content={"detail": "Accepted for processing"}, status_code=202)

# OpenTelemetry instrumentation setup
# TODO: fix open telemetry so it doesn't slow app so much
# Wrap this in a try-except to prevent failure if telemetry setup fails
try:
    # Instrument the FastAPI app for automatic telemetry collection
    FastAPIInstrumentor.instrument_app(app)
except Exception as e:
    print(f"Warning: OpenTelemetry instrumentation failed: {str(e)}")